จัดตำแหน่ง Element ด้วย CSS Positioning

สรุปสั้น ๆ ก่อนเริ่มอ่าน
สำหรับใครที่ได้ลองเขียน Web page มาระยะเวลาหนึ่งแล้ว ก็จะได้ลองปรับแต่งการแสดงผลบนหน้าเว็บในรูปแบบต่าง ๆ มาแล้วหลากหลาย และได้ลองใช้ Style ในคำสั่งต่าง ๆ มากมาย แต่อาจจะมีติดปัญหาในการใช้งาน Style ในบางคำสั่ง ที่อาจจะมีความซับซ้อนในการทำความเข้าใจ และการใข้งาน ในบทความนี้ ผมก็จะมาเสนอวิธีการจัดการตำแหน่งของ Element ต่าง ๆ ด้วยคำสั่ง Position เบื้องต้น พร้อมกับแสดงตัวอย่างการใช้งานคำสั่งนี้ ในรูปแบบต่าง ๆ ให้ทุกคนกันครับ และเมื่ออ่านบทความนี้จบแล้ว เราก็จะสามารถใช้งานคำสั่ง Position ได้อย่างเข้าใจ และเชี่ยวชาญมากขึ้นไปอีกไม่มากก็น้อย !!

[btd_post_author]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position คืออะไร
Position เป็นคำสั่งที่เอาไว้กำหนดว่า Element ที่เราต้องการนั้น จะถูกแสดง หรือถูกวางอยู่ที่ตำแหน่งไหน บนหน้าเว็บที่เราสร้างขึ้น ซึ่งค่า (Values) ของ Position ที่มีด้วยกันหลัก ๆ อยู่ 5 ประเภท ซึ่งแบ่ง และกำหนดได้ด้วยคำสั่งดังนี้

position: static;
position: relative;
position: absolute;
position: fixed;
position: sticky;

โดย Position จะมี Property เริ่มต้น (Default) คือ static นั้นเอง กล่าวคือ ถ้าเราไม่กำหนด position เลย ทุก Element ที่เราสร้างขึ้นมา ก็จะต้องถูกกำหนดเป็น static ไว้ตลอดเวลา

และนอกจากนั้น จะสามารถกำหนดตำแหน่งได้ด้วยตำสั่ง top, right, bottom และ left ที่จะต้องระบุพร้อมกันกับจำนวนที่เป็นตัวเลข โดยส่วนใหญ่มักจะใช้เป็นหน่วย px และ % นั่นเอง ตัวอย่างเช่น

...
.item-1 {
  position: relative;
  top: 20px;
  right: 50%;
}
...

ก็จะได้ผลลัพธ์เป็น 

... แปะรูป ex-1.png ...

จะเห็นว่า Element 1 ถูกวางตำแหน่งตามจำนวนที่ระบุไว้ โดยอ้างอิงจากตำแหน่งเดิมของตัวเอง

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position: static
สำหรับ Position: static อย่างที่กล่าวไว้ข้างต้นไปแล้ว ว่าเป็น Default Values ของ Position นอกจากนั้น เรื่องที่จำเป็นต้องทราบไว้คือ Position: static นั้น จะไม่รองรับการใช้คำสั่ง top, right, bottom และ left ในการกำหนดตำแหน่ง ดังนั้น ไม่จำเป็นต้องใช้คำสั่งเหล่านั้นสำหรับ static ตัวอย่างเช่น

...
.item-2 {
  position: static;
  top: 20px;
  right: 50%;
}
...

ก็จะยังได้ผลลัพธ์เป็น

... แปะรูป ex-1.png ...

จะเห็นว่า Element 2 จะไม่ถูกกำหนดตำแหน่งตามค่า top: 20px; right: 50%; ที่กำหนดไว้

จากคำอธิบาย และตัวอย่าง หลายคนก็คงจะมองว่า ในเมื่อ static เป็นค่าเริ่มต้น และไม่รองรับคำสั่ง top, right, bottom และ left แล้ว เราจะมากำหนดอีกทำไม... ในมุมนี้ ก็เป็นจริงอย่างที่หลาย ๆ คนคิด แต่ก็แค่ในกรณีที่ใช้ธรรมดาเท่านั้น เพราะการกำหนดให้ position: static; มักใช้ในกรณีที่ Element นั้น ๆ เคยถูกกำหนดเป็นอย่างอื่น ที่ไม่ใช่ Default Values แล้ว และต้องการที่จะกำหนดให้ Element นั้น ๆ กลับมาเป็นค่า static เช่นเคย มักใช้ในกรณีการทำ Responsive ต่าง ๆ ตัวอย่างเช่น

...
@media (width: 1440px) {
  .item-1 {
    position: relative;
    top: 20px;
    right: 50%;
  }
}

@media (width: 412px) {
  .item-1 {
    position: static;
  }
}
...

ก็จะได้ผลลัพธ์เป็น 

... แปะรูป ex-2.png ...

จะเห็นว่า ที่ขนาดหน้าจอ 1440px Element 1 จะถูกกำหนดตามที่ระบุไ;้ และที่ขนาดหน้าจอ 412px Element 1 ก็ไม่ถูกกำหนดอีกต่อไป เพราะถูกกำหนดเป็น static นั้นเอง

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position: relative
สำหรับ Position: relative อย่างที่เคยแสดงตัวอย่างไปก่อนหน้านี้ ว่าทำให้เราสามารถกำหนดตำแหน่งของ Element ได้ ผ่านคำสั่ง top, right, bottom และ left แต่มีสิ่งที่จำเป็นต้องทราบไว้เพิ่มเติมก็คือ การใช้ relative ในการกำหนดตำแหน่งนั้น ค่าตำแหน่งที่ระบุ จะคำนวณอ้างอิงจากตำแหน่งเดิมของตัว Element เท่านั้น และ Element อื่น ๆ ก็จะยังคงอยู่ตำแหน่งเดิม ไม่เปลี่ยนไป นอกจากนี้ ยังสามารถใช้งาน z-index ในกรณีที Element มีการซ้อนทับกันได้อีกด้วย เช่น

...
.item-3 {
  position: relative;
  left: 50%;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-3.1.png ...

จะเห็นว่า Element 3 จะทับ Element 4 อยู่ และถ้าหากเราต้องการให้ Element 3 อยู่หลัง Element 4 เราก็สามารถใข่ z-index ได้ โดย

...
.item-3 {
  position: relative;
  left: 50%;
  z-index: -1;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-3.2.png ...

จะเห็นว่า Element 3 จะอยู่ใต้ Element 4 ตามที่ต้องการแล้ว

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position: absolute
สำหรับ Position: absolute จะเป็นการกำหนดตำแหน่งของ Element ให้ลอยอิสระจากตำแหน่งเดิม แล้;ไปเลือกอ้างอิงกับกรอบ (Parent) ของตั; Element เอง ทำให้เมื่อใช้งาน จะไม่ทิ้งช่อง;่างที่ตำแหน่งเดิม ซึ่งต่างจาก relative ที่จะอ้างอิงจากตำแหน่งเดิมนั่นเอง โดยที่ absolute ก็จะสามารถกำหนดตำแหน่งของ Element ได้ ผ่านคำสั่ง top, right, bottom, left และ z-index ได้เช่นกัน ตัวอย่างเช่น

...
.item-5 {
  position: absolute;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-4.1.png ...

จะเห็นว่า Element 5 ย้ายขึ้นไปทับบน Element 1 พร้อมกับ Element 6 ที่ย้ายตำแหน่งมาแทนที่ Element 5 นั่นเอง

แต่ถ้าหากเราลองเพิ่มคำสั่งกำหนดตำแหน่งเข้าไป เช่น 

...
.item-5 {
  position: absolute;
  top: 0px;
  left: 0px;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-4.2.png ...

จะเห็นว่า Element 5 ย้ายขึ้นไปตามที่กำหนด คือ ตำแหน่งที่ top: 0px และ left: 0px ของหน้าเว็บ

แต่ถ้าหากเราต้องการที่จะให้ Element 5 ยังอยู่ในกรอบ หรือกำหนดตำแหน่งอ้างอิง เป็น container ที่เราต้องการ เราก็จำเป็นต้องกำหนดให้ container ของเรา มี position เป็น relative ก่อน โดยกำหนดได้ ดังนี้ 

...
.item-5 {
  position: absolute;
  top: 0px;
  left: 0px;
}

.container {
  position: relative;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-4.3.png ...

จะเห็นว่า Element 5 ย้ายขึ้นไปตามที่กำหนด คือ ตำแหน่งที่ top: 0px และ left: 0px ของ container ที่เราต้องการแล้วนั่นเอง

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position: fixed
สำหรับ Position: fixed จะเป็นการกำหนดตำแหน่งของ Element ให้อยู่จุดเดิมบนหน้าจอเสมอ ไม่;่าจะเลือนหน้าจอขึ้น หรือลง ก็จะอยู้ที่ตำแหน่งเดิมของหน้าจอไม่เปลี่ยนแปลง เช่น

...
.item-7 {
  position: fixed;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-5.1.png ...

จะเห็นว่า Element 7 ย้ายขึ้นไปทับบน Element 1 พร้อมกับ Element 8 ที่ย้ายตำแหน่งมาแทนที่ Element 7 เหมือนกับ Position: absolute นั่นเอง

นอกจากนี้ Position: fixed ยังสามารถใช้งานคำสั่งกำหนดตำแหน่งของ Element ได้ทั้ง top, right, bottom, left และ z-index ได้เช่นกัน ตัวอย่างเช่น
...
.item-7 {
  position: fixed;
  top: 0px;
  left: 0px;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-5.2.png ...

จะเห็นว่า Element 7 ย้ายขึ้นไปตามที่กำหนด คือ ตำแหน่งที่ top: 0px และ left: 0px ของหน้าเว็บ เช่นกันกับ Position: absolute แต่เมื่อเลื่อนหน้าจอลงมาด้านล่าง ก็จะเห็น;่า Element 7 จะเลื่อนตามเรามาเสมอ

... แปะรูป ex-5.3.png ...

และ ถึงแม้จะกำหนดให้ Parent ของ Element เป็น position: relative แล้; ตั; position: fixed ก็จะยังอ้างอิงกับหน้าจอของเ;็บเหมือนเดิม ไม่ได้ถูกอ้างอิงจาก Parent เหมื่อน absolute 

...
.item-7 {
  position: fixed;
  top: 0px;
  left: 0px;
}

.container {
  position: relative;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-5.2.png ...

... แปะรูป ex-5.3.png ...

จะเห็นว่า Element 7 ก็ยังอยู่ตำแหน่งเดิมก่อนหน้านี้ และยังติดตามหน้าจอเราไปอยู่นั่นเอง

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Position: sticky
สำหรับ Position: sticky จะเป็นการกำหนดตำแหน่งของ Element ให้อยู่จุดเดิม เมื่อมีการเลื่อนหน้าจอมาถึง Element และตำแหน่งที่กำหนด จนก;่าจะเลื่อนจนสิ้นสุดการมองเห็นของ Parent และที่สำคัญ Position: sticky จำเป็นต้องระบุ top (ในกรณีเลื่อนลง) เสมอ ไม่เช่นนั้น sticky จะไม่ทำงาน

...
.item-5 {
  position: sticky;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-6.1.png ...

จะเห็นว่า Element 5 ไม่มีการเลื่อนลงมาตามแต่อย่างใด 

แต่หากกำหนด top ลงไปเป็น 

...
.item-5 {
  position: sticky;
  top: 0px;
}
...

ก็จะได้ผลลัพธ์เป็น

... แปะรูป ex-6.2.png ...

จะเห็นว่า Element 5 มีการเลื่อนลงมาตามเรียบร้อยแล้; 

และเมื่อเลื่อนออกจาก Parent แล้; Element 5 ก็จะหยดเลื่อนตามลงมานั่นเอง 

... แปะรูป ex-6.3.png ...

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

สุดท้ายก่อนจากกัน
สำหรับใคร ที่อยากเรียนรู้เกี่ยวกับการใช้งาน CSS position หรือการใช้งานในรูปแบบอื่น ไม่;่าจะเป็น display หรือ float ก็สามารถเข้าไปศึกษาเพิ่มเติมจาก อ้างอิง ด้านล้างนี้ได้เลยนะครับ สำหรับบทความนี้ ถ้ามีข้อผิดพลาดอะไร สามารถแนะนำเข้ามาได้เลยนะครับ ขอบคุณครับ 

อ้างอิง
สอน CSS #07 - position - ตำแหน่งหลากหลายแบบ สืบค้นเมื่อ 28 ตุลาคม 2565 จาก: https://www.youtube.com/watch?v=j4_JBL3BXCQ
position สืบค้นเมื่อ 28 ตุลาคม 2565 จาก: https://developer.mozilla.org/en-US/docs/Web/CSS/position
Learn CSS Positioning Quickly With A Real World Example สืบค้นเมื่อ 28 ตุลาคม 2565 จาก: https://www.youtube.com/watch?v=MxEtxo_AaZ4
